#Longest Common Subsequence
'''
def LCSrec(i,j): # Using top-down recursive approach(without memoization)
    if i==maxa or j==maxb:
        return 0
    if a[i]==b[j]:
        return 1+LCS(i+1,j+1)
    else:
        return max(LCS(i+1,j),LCS(i,j+1))
'''
def LCSdp(): #Using bottom-up dynamic programming apporach
    memo=[[0 for x in range(maxb+1)] for y in range(maxa+1)]
    for rowi in range(1,maxa+1):
        for coli in range(1,maxb+1):
            if a[rowi-1]==b[coli-1]:
                memo[rowi][coli]=1+memo[rowi-1][coli-1]
            else:
                memo[rowi][coli]=max(memo[rowi-1][coli],memo[rowi][coli-1])

    subs=[0 for x in range(memo[maxa][maxb])]
    ij=memo[maxa][maxb]-1
    p=maxa
    q=maxb
    while p>0 and q>0:
        if a[p-1]==b[q-1]:
                subs[ij]=a[p-1]
                p-=1
                q-=1
                ij-=1
        else:
            if memo[p-1][q]>memo[p][q-1]:
                p-=1
            else:
                q-=1
    print("Longest common subsequence is: {}".format("".join(subs)))    
    return memo[maxa][maxb]

a=input("Enter the first string\n")
b=input("Enter the second string\n")
maxa=len(a)
maxb=len(b)
print("The length of the longest common subsequence is {}".format(LCSdp()))
